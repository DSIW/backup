#!/usr/bin/env ruby
# encoding: utf-8

begin
  require "colorize"
rescue LoadError => e
  STDERR.puts "Couldn't load gem `colorize`. Continue without colorizing."
end
require "optparse"
require "json"
require "yaml"

require_relative "backup_lib"
include BackupLib

INTERVALS = %w[weekly monthly yearly]

module Utils
  def self.colorize(string, color)
    if string.respond_to? color
      string.send(color)
    else
      string
    end
  end

  def self.pluralize(count, singular, plural, options = {})
    suffix = count.abs == 1 ? singular : plural
    [count, suffix].join(' ')
  end

  def self.parse_options
    options = {intervals: INTERVALS}
    OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename(__FILE__)} [OPTIONS]"
      opts.separator ""
      opts.separator "OPTIONS:"

      opts.on("-n", "--dry-run", "Run without executing backups") do |v|
        options[:dry_run] = v
      end

      opts.on("-f", "--force", "Backup independent of status") do
        options[:force] = true
      end

      opts.on("-l", "--local", "Don't backup to remote machines") do
        options[:only_local] = true
      end

      opts.on("-r", "--remote", "Don't backup to local machines") do
        options[:only_remote] = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end.parse!
    options
  end

  def self.exit_with_error(message)
    STDERR.puts Utils.colorize(message, :red)
    exit 1
  end

  def self.check_connection(ip, max_times = 3)
    max_times.times do |i|
      yield(max_times - i)
      `ping -W 1 -c 1 #{ip} >/dev/null`
      return true if $? == 0
    end

    false
  end
end

OPTIONS = Utils.parse_options

# Print status
Interval.all.group_by { |i| i.destination_key }.each_with_index do |(destination, intervals), index|
  puts if index > 0
  puts "DESTINATION: #{Utils.colorize(destination + (intervals.first.remote? ? ' (remote)' : ''), :blue)}"

  intervals.each do |interval|
    puts IntervalPresenter.new(interval, force_old: OPTIONS[:force]).message
  end
end

old_backups = OPTIONS[:force] ? Interval.all : Interval.olds
if OPTIONS[:only_local]
  old_backups = old_backups.select { |b| !b.remote? }
elsif OPTIONS[:only_remote]
  old_backups = old_backups.select { |b| b.remote? }
end

openvpn_pid = nil

puts
if old_backups.empty?
  puts Utils.colorize("Yeah, nothing to backup!", :green)
else
  groups = old_backups.group_by { |old_backup| old_backup.destination_key }
  groups.each do |group, old_backups|
    old_backups.each_with_index do |old_backup, index|
      puts Utils.colorize("'#{old_backup.dirname}' (#{old_backup.destination_key}) backup started", :blue)

      unless OPTIONS[:dry_run]
        if old_backup.remote?
          if old_backup.active_vpn?
            puts Utils.colorize("VPN connection already established", :green)
          else
            openvpn_pid = Process.spawn("sudo openvpn #{old_backup.vpn_config} >/dev/null")
            Signal.trap("SIGINT") do
              if openvpn_pid
                puts Utils.colorize("Killing openvpn process #{openvpn_pid}", :blue)
                `sudo killall -9 openvpn`
              end
              abort
            end
            puts Utils.colorize("VPN connection started", :green)
          end
        end

        if old_backup.remote?
          connected = Utils.check_connection(old_backup.host, 15) do |rest_secs|
            print Utils.colorize("\rWait #{rest_secs} secs for SSH connection...", :yellow)
          end
          if connected
            puts Utils.colorize("\rConnected to #{old_backup.destination_host}", :green)
          else
            puts Utils.colorize("\rCouldn't connect to remote #{old_backup.destination_host}", :red)
            break
          end

          old_backup.notify("Backup #{index+1}/#{old_backups.length} started!")
        end

        system({'BORG_ROOT' => old_backup.destination}, 'borg-backup', old_backup.name)

        if old_backup.remote?
          old_backup.notify("Backup #{index+1}/#{old_backups.length} finished!")
        end

        puts # new line
      end
    end
  end
end

`sudo killall -9 openvpn` if openvpn_pid

puts
puts "Don't forget to unmount!"

unless old_backups.empty?
  CacheFile.new.write(Interval.all) unless OPTIONS[:dry_run]
end
